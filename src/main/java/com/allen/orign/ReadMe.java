package com.allen.orign;
/**
 * (在计算机中的所有二进制的计算都是通过补码去计算的)
 * 基本概念：
 * 原码：
 * 反码：整数的反码是原码本身，负数的反码就是符号位不变，其他位置取反
 * 补码：整数的补码是原码本身，负数的补码就是负号为不变，其余取反在加1
 * 十进制转为二进制
 * 1、正数  42   (除2余数组成)
 *    42/2 = 21   0
 *    21/2 = 10   1
 *    10/2 = 5    0
 *    5/2 = 2     1
 *    2/2 = 1     0
 *    1/2 = 0     1
 *   二进制为： 101010
 * 2.小数  (乘以2，取整数，知道为1)
 * 	  0.25*2 = 0.50   0
 *    0.50*2 = 1.0    1
 *   0.25的二进制为0.01
 *  即42.25的二进制为：
 *  101010.01
 *    
 * 十进制
 * 
 * 1.按位非(对每一位进行取反)
源码 0000 0000 0000 0000 0000 0000 0010 1010     
反码 0000 0000 0000 0000 0000 0000 0010 1010
补码 0000 0000 0000 0000 0000 0000 0010 1010
取反(~)负数
补码	1111 1111 1111 1111 1111 1111 1101 0101
反码	1111 1111 1111 1111 1111 1111 1101 0100   (负数的时候，补码转为反码的时候，-1，在符号位不变取反)
原码	1000 0000 0000 0000 0000 0000 0010 1011   -43
 *  
 * 
 * 
 *2.按位与(如果俩个数字都为1，则才能为1)
 * 0010 1010     42
 &
 * 0000 1111     15 
 = ------------------
 * 0000 1010     10
 * 
 * 
 *3.按位或(任何一个数字是1，则结果为1)
 * 0010 1010     42
 |
 * 0000 1111     15 
 = ------------------
 * 0010 1111     47
 *  
 * 4.异或：(1 * 1 = 0 ;0 * 0 = 0 ; 1 * 0 = 1;0*1=1)
 * 0010 1010     42
 ^ ---------
 * 0000 1111     15
 * ---------
 = 0010 0101     37
 * 
 * 例子：
 * 42 | -15 = 
   42的源码、反码、补码都是这样:
   0000 0000 0000 0000 0000 0000 0010 1010  
 * -15
 * 15的源码
  0000 0000 0000 0000 0000 0000 0000 1111
   反码
  1111 1111 1111 1111 1111 1111 1111 0000
  补码(在加上1)
  1111 1111 1111 1111 1111 1111 1111 0001
 * 
 * 0000 0000 0000 0000 0000 0000 0010 1010
 *     |
 * 1111 1111 1111 1111 1111 1111 1111 0001
 * 计算的结果(补码)
 * 1111 1111 1111 1111 1111 1111 1111 1011
   (反码 -1)
 * 1111 1111 1111 1111 1111 1111 1111 1010
 * (源码)
 * 1000 0000 0000 0000 0000 0000 0000 0101
 * (结果 - 5)
 * 
 * 
 * 42 & -15
 * 得到对应的(补码)
 * 0000 0000 0000 0000 0000 0000 0010 1010
 *     &
 * 1111 1111 1111 1111 1111 1111 1111 0001
 * (得到的是整数，源码反码补码都是一样的)
 * 0000 0000 0000 0000 0000 0000 0010 0000
 * (结果32)
 * 
 * 42 ^ -15
 * 0000 0000 0000 0000 0000 0000 0010 1010
 *     ^
 * 1111 1111 1111 1111 1111 1111 1111 0001
 * (得到的补码为负数)
 * 1111 1111 1111 1111 1111 1111 1101 1011
 * (得到反码-1)
 * 1111 1111 1111 1111 1111 1111 1101 1010
 * (得到源码)
 * 1000 0000 0000 0000 0000 0000 0010 0101
 * 得到的结果(-37)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 10       <<        2 
 * 1010     向左移动2位
 * 0010 1000    =     40
 *
 * 10    	>> 		2
 * 1010  向右移动2位
 * 0000 0010    =   2
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 负数:
 * -10 转为二进制的步奏:
 * 源码:
 * 0000 0000 0000 0000 0000 0000 0000 1010
 * 反码
 * 1111 1111 1111 1111 1111 1111 1111 0101
 * 在和加1得到补码：下面是-10的二进制
 * 1111 1111 1111 1111 1111 1111 1111 0110
 * -10       >>       2
 * 负数 高位插入1 整数高位插入0
 * 1111 1111 1111 1111 1111 1111 1111 1101
 * 在减一得到反码
 * 1111 1111 1111 1111 1111 1111 1111 1100
 * 在取反
 * 0000 0000 0000 0000 0000 0000 0000 0011 得到对应的数据 3
 * 在加入 负号 即得到对应的结果 -3
 * 
 * 
 * -10    <<       2
 * 负数的左移 和 整数的左移是一样的 最后在结果处 加入对应的负号
 * 
 * 无符号 >>> 右移  
 * 无符号 <<< 左移
 * 
 * 
 * -10       >>>      2
 * 
 * 10的源码
 * 0000 0000 0000 0000 0000 0000 0000 1010
 * -10反码
 * 1111 1111 1111 1111 1111 1111 1111 0101
 * -10 补码
 * 1111 1111 1111 1111 1111 1111 1111 0110
 * 通过右移动俩位
 * 1111 1111 1111 1111 1111 1111 1111 1101
 * 这就是最终得到的结果
 * 
 **/
public class ReadMe {

	public static void main(String []args) {
		// ~   按位非
		// &   按位与
		// |   按位或
		// ^   按位异或
		// <<  左移
		// >>  右移
		// >>  无符号右移
		int i= 10;
		System.out.println(Integer.toBinaryString(i));
		System.out.println("~ "+(~i));
		System.out.println(">> "+(i>>2)); // /2   0000 0010 = 2
		System.out.println("<< "+(i<<2)); //*2    0010 1000 = 40 
		System.out.println(">>> "+(i>>>2));// /2   0000 0010 = 2
		System.out.println("& "+(i&2));
		System.out.println("^ "+(i^2));
		System.out.println("| "+(i|2));
		
		System.out.println();
		int a = -10;
		System.out.println(Integer.toBinaryString(a));
		System.out.println((~a));
		System.out.println(a>>2); // /2   0000 0010 = 2
		System.out.println(a<<2); //*2    0010 1000 = 40 
		System.out.println(a>>>2);// /2  
		System.out.println(a^2);
		System.out.println(a&2);
		System.out.println(a|2);
		
		
		System.out.println(42 & -15);
		System.out.println(42^-15);
		System.out.println(Integer.toBinaryString(1073741820));
		
	//	System.out.println(Integer.toBinaryString());
	}
	
	
}
